{
  "name": "stacked-carousel",
  "files": [
    {
      "name": "stacked-carousel.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useCallback, useRef } from \"react\";\nimport Image from \"next/image\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface StackedCarouselProps {\n  images: string[];\n  width?: number;\n  height?: number;\n  borderColor?: string;\n  borderWidth?: number;\n  backgroundColor?: string;\n}\n\nconst StackedCarousel: React.FC<StackedCarouselProps> = ({\n  images,\n  width = 300,\n  height = 400,\n  borderColor = \"white\",\n  borderWidth = 12,\n  backgroundColor = \"#e0f1fa\",\n}) => {\n  const [order, setOrder] = useState(images.map((_, index) => index));\n  const [isMoving, setIsMoving] = useState(false);\n  const [direction, setDirection] = useState<\"left\" | \"right\" | null>(null);\n  const animationQueue = useRef<(\"left\" | \"right\")[]>([]);\n\n  const moveCard = useCallback(\n    (moveDirection: \"left\" | \"right\") => {\n      if (isMoving) {\n        animationQueue.current.push(moveDirection);\n        return;\n      }\n\n      setIsMoving(true);\n      setDirection(moveDirection);\n\n      setTimeout(() => {\n        setOrder((prevOrder) => {\n          const newOrder = [...prevOrder];\n          if (moveDirection === \"left\") {\n            const lastItem = newOrder.pop()!;\n            newOrder.unshift(lastItem);\n          } else {\n            const firstItem = newOrder.shift()!;\n            newOrder.push(firstItem);\n          }\n          return newOrder;\n        });\n\n        setIsMoving(false);\n        setDirection(null);\n\n        if (animationQueue.current.length > 0) {\n          const nextDirection = animationQueue.current.shift()!;\n          moveCard(nextDirection);\n        }\n      }, 300);\n    },\n    [isMoving],\n  );\n\n  const getRotation = (index: number) => {\n    const rotations = [0, -10, 10, 20];\n    return rotations[index % rotations.length];\n  };\n\n  return (\n    <div className={`relative w-full max-w-[${width}px] h-[${height}px]`}>\n      <div className={`relative w-full h-[${height - 100}px]`}>\n        <AnimatePresence>\n          {images.map((src, index) => {\n            const orderIndex = order.indexOf(index);\n            const isTop = orderIndex === order.length - 1;\n            const isBottom = orderIndex === 0;\n            const isAnimating =\n              (direction === \"left\" && isTop) ||\n              (direction === \"right\" && isBottom);\n\n            return (\n              <motion.div\n                key={src}\n                className={`absolute top-0 left-0 w-full h-[${height - 100}px]`}\n                animate={{\n                  rotate: isMoving ? 0 : getRotation(orderIndex),\n                  x: isAnimating\n                    ? direction === \"left\"\n                      ? \"-100%\"\n                      : \"100%\"\n                    : \"0%\",\n                  zIndex: orderIndex,\n                }}\n                transition={{\n                  duration: 0.3,\n                  ease: [0.25, 0.1, 0.25, 1],\n                  rotate: {\n                    type: \"spring\",\n                    stiffness: 200,\n                    damping: 12,\n                    mass: 1,\n                  },\n                }}\n              >\n                <Image\n                  src={src}\n                  alt={`Image ${index + 1}`}\n                  fill\n                  className={`rounded-3xl border-[${borderWidth}px] border-${borderColor} object-cover shadow-lg`}\n                />\n              </motion.div>\n            );\n          })}\n        </AnimatePresence>\n      </div>\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-center space-x-4 mt-4\">\n        <button\n          onClick={() => moveCard(\"left\")}\n          className=\"bg-white bg-opacity-50 hover:bg-opacity-75 rounded-full p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\n          aria-label=\"Previous image\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-800\" />\n        </button>\n        <button\n          onClick={() => moveCard(\"right\")}\n          className=\"bg-white bg-opacity-50 hover:bg-opacity-75 rounded-full p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all\"\n          aria-label=\"Next image\"\n        >\n          <ChevronRight className=\"w-6 h-6 text-gray-800\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default StackedCarousel;\n"
    }
  ],
  "type": "components:ui"
}
{
  "name": "dropdown",
  "files": [
    {
      "name": "dropdown.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { motion } from \"framer-motion\";\n\nexport interface DropdownProps<T> {\n  value: T;\n  onChange: (value: T) => void;\n  options: T[];\n  renderOption?: (option: T) => React.ReactNode;\n  placeholder?: string;\n  className?: string;\n}\n\nfunction Dropdown<T extends string | number>({\n  value,\n  onChange,\n  options,\n  renderOption,\n  placeholder = \"Select an option\",\n  className = \"\",\n}: DropdownProps<T>) {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className={`relative ${className}`} ref={dropdownRef}>\n      <DropdownButton\n        value={value}\n        placeholder={placeholder}\n        onClick={() => setIsOpen(!isOpen)}\n        isOpen={isOpen}\n      />\n      <AnimatePresence>\n        {isOpen && (\n          <DropdownMenu>\n            {options.map((option) => (\n              <DropdownItem\n                key={option}\n                option={option}\n                onClick={() => {\n                  onChange(option);\n                  setIsOpen(false);\n                }}\n              >\n                {renderOption ? renderOption(option) : option}\n              </DropdownItem>\n            ))}\n          </DropdownMenu>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\nexport default Dropdown;\n\ninterface DropdownButtonProps {\n  value: string | number;\n  placeholder: string;\n  onClick: () => void;\n  isOpen: boolean;\n}\n\nconst DropdownButton: React.FC<DropdownButtonProps> = ({\n  value,\n  placeholder,\n  onClick,\n  isOpen,\n}) => (\n  <button\n    onClick={onClick}\n    className=\"w-full border border-black/10 dark:border-white/10 bg-white dark:bg-[#111111] focus:outline-none dark:text-white text-black text-sm rounded-md px-3 py-2 flex items-center justify-between transition-colors duration-200\"\n  >\n    <span>{value || placeholder}</span>\n    <svg\n      className={`w-4 h-4 ml-2 transition-transform duration-200 ${isOpen ? \"rotate-180\" : \"\"}`}\n      fill=\"currentColor\"\n      viewBox=\"0 0 20 20\"\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  </button>\n);\n\ninterface DropdownItemProps<T> {\n  option: T;\n  onClick: () => void;\n  children: React.ReactNode;\n}\n\nfunction DropdownItem<T>({ option, onClick, children }: DropdownItemProps<T>) {\n  return (\n    <button\n      onClick={onClick}\n      className=\"block w-full text-left px-4 py-2 text-sm dark:text-white text-black hover:bg-black/10 dark:hover:bg-white/10 transition-colors duration-150\"\n    >\n      {children}\n    </button>\n  );\n}\n\nconst DropdownMenu: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => (\n  <motion.div\n    initial={{ opacity: 0, y: -10 }}\n    animate={{ opacity: 1, y: 0 }}\n    exit={{ opacity: 0, y: -10 }}\n    transition={{ duration: 0.2 }}\n    className=\"absolute z-10 w-full mt-1 bg-white dark:bg-[#111111] border border-black/10 dark:border-white/10 rounded-md shadow-lg overflow-hidden\"\n  >\n    {children}\n  </motion.div>\n);\n"
    }
  ],
  "type": "components:ui"
}
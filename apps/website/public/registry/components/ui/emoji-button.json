{
  "name": "emoji-button",
  "files": [
    {
      "name": "emoji-button.tsx",
      "content": "\"use client\";\n\nimport React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n  ReactNode,\n} from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface BubbleButtonProps {\n  icon: React.ReactNode;\n  children: ReactNode;\n  emergingInterval: number;\n  color: string;\n}\n\ninterface Bubble {\n  id: number;\n  x: number;\n  y: number;\n  createdAt: number;\n  waveAmplitude: number;\n  waveFrequency: number;\n  riseHeight: number;\n  duration: number;\n}\n\nexport default function BubbleButton({\n  icon,\n  children,\n  emergingInterval,\n  color,\n}: BubbleButtonProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const [bubbles, setBubbles] = useState<Bubble[]>([]);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const bubbleIdRef = useRef(0);\n  const lastBubbleTimeRef = useRef(0);\n\n  const createBubble = useCallback((x: number, y: number) => {\n    const newBubble: Bubble = {\n      id: bubbleIdRef.current++,\n      x,\n      y,\n      createdAt: Date.now(),\n      waveAmplitude: Math.random() * 30 + 10,\n      waveFrequency: Math.random() * 2 + 1,\n      riseHeight: Math.random() * 40 + 20,\n      duration: Math.random() * 0.5 + 1,\n    };\n    setBubbles((prevBubbles) => [...prevBubbles, newBubble]);\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (buttonRef.current && isHovered) {\n        const currentTime = Date.now();\n        if (currentTime - lastBubbleTimeRef.current >= emergingInterval) {\n          const rect = buttonRef.current.getBoundingClientRect();\n          const x = e.clientX - rect.left - 35;\n          const y = e.clientY - rect.top - 60;\n          createBubble(x, y);\n          lastBubbleTimeRef.current = currentTime;\n        }\n      }\n    },\n    [isHovered, createBubble, emergingInterval],\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBubbles((prevBubbles) =>\n        prevBubbles.filter(\n          (bubble) => Date.now() - bubble.createdAt < bubble.duration * 1000,\n        ),\n      );\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <motion.button\n      ref={buttonRef}\n      className={`group relative px-4 py-2 rounded-full overflow-visible transition-colors duration-300`}\n      style={\n        {\n          \"--button-color\": color,\n          backgroundColor: `${color}1a`,\n          color: color,\n        } as React.CSSProperties\n      }\n      whileTap={{ scale: 0.9 }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onMouseMove={handleMouseMove}\n    >\n      <span className=\"relative z-10 text-lg font-semibold\">{children}</span>\n      <AnimatePresence>\n        {bubbles.map((bubble) => (\n          <motion.div\n            key={bubble.id}\n            className=\"absolute pointer-events-none\"\n            initial={{ x: bubble.x, y: bubble.y, scale: 0 }}\n            animate={{\n              x: [\n                bubble.x,\n                bubble.x +\n                  Math.sin((Math.PI / 2) * bubble.waveFrequency) *\n                    bubble.waveAmplitude,\n                bubble.x +\n                  Math.sin(Math.PI * bubble.waveFrequency) *\n                    bubble.waveAmplitude,\n                bubble.x,\n              ],\n              y: [\n                bubble.y,\n                bubble.y - bubble.riseHeight * 0.6,\n                bubble.y - bubble.riseHeight * 0.8,\n                bubble.y - bubble.riseHeight,\n              ],\n              scale: [0, 1, 1, 0],\n            }}\n            transition={{\n              duration: bubble.duration,\n              times: [0, 0.3, 0.8, 1],\n              ease: \"easeInOut\",\n            }}\n          >\n            {icon}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n"
    }
  ],
  "type": "components:ui"
}
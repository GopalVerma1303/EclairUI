{
  "name": "folder-hover-button",
  "files": [
    {
      "name": "folder-hover-button.tsx",
      "content": "import React, { useState } from \"react\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport Image from \"next/image\";\n\ninterface FolderHoverButtonProps {\n  folderName: string;\n  images: string[];\n}\n\nfunction FolderHoverButton({ folderName, images }: FolderHoverButtonProps) {\n  const [isHovered, setIsHovered] = useState(false);\n  const controls = useAnimation();\n\n  const handleHoverStart = () => {\n    setIsHovered(true);\n    controls.start(\"open\");\n  };\n\n  const handleHoverEnd = () => {\n    setIsHovered(false);\n    controls.start(\"closed\");\n  };\n\n  const maxRotation = 45;\n  const rotationStep = maxRotation / (images.length + 1);\n\n  const folderVariants = {\n    closed: {\n      rotateX: 0,\n      y: 0,\n      z: 40,\n      zIndex: 1,\n    },\n    open: {\n      rotateX: -maxRotation,\n      z: 40,\n      zIndex: 3,\n    },\n  };\n\n  const imageVariants = (index: number) => ({\n    closed: { rotateX: 0, y: 0, z: 0, opacity: 1 },\n    open: {\n      rotateX: -maxRotation + (index + 1) * rotationStep,\n      z: 30 - index * 5,\n      opacity: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 20,\n        delay: index * 0.1,\n      },\n    },\n  });\n\n  return (\n    <div\n      className=\"relative w-full h-32 cursor-pointer\"\n      style={{ perspective: \"1000px\" }}\n      onMouseEnter={handleHoverStart}\n      onMouseLeave={handleHoverEnd}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={`Open ${folderName} folder`}\n    >\n      <div\n        className=\"absolute inset-0 flex items-end justify-center\"\n        style={{ transformStyle: \"preserve-3d\" }}\n      >\n        {images.map((image, index) => (\n          <motion.div\n            key={index}\n            className=\"absolute inset-0 origin-bottom\"\n            initial=\"closed\"\n            animate={controls}\n            variants={imageVariants(index)}\n            style={{\n              transformStyle: \"preserve-3d\",\n              zIndex: images.length - index + (isHovered ? 2 : 1),\n            }}\n          >\n            <Image\n              src={image}\n              alt={`Image ${index + 1} in ${folderName} folder`}\n              layout=\"fill\"\n              objectFit=\"cover\"\n              className=\"rounded-lg\"\n            />\n          </motion.div>\n        ))}\n        <motion.div\n          className=\"absolute inset-0 bg-[#1f1f1f] border-[2px] border-white/5 rounded-lg origin-bottom\"\n          initial=\"closed\"\n          animate={controls}\n          variants={folderVariants}\n          transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n          style={{\n            transformStyle: \"preserve-3d\",\n            zIndex: images.length + 1,\n          }}\n        >\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"text-2xl font-caveat text-white\">\n              {folderName}\n            </span>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n\nexport default FolderHoverButton;\n"
    }
  ],
  "type": "components:ui"
}
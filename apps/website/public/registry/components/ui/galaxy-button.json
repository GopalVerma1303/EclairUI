{
  "name": "galaxy-button",
  "files": [
    {
      "name": "galaxy-button.tsx",
      "content": "import React, { useMemo, useRef, useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface Star {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  angle: number;\n  distance: number;\n  speed: number;\n}\n\ninterface GalaxyButtonProps {\n  text: string;\n  gradientColors: string[];\n  shimmerColor?: string;\n  textColor?: string;\n  fontSize?: string;\n  padding?: string;\n  starCount?: number;\n  className?: string;\n  onClick?: () => void;\n}\n\nfunction useIsHovered() {\n  const [isHovered, setIsHovered] = useState(false);\n  return {\n    isHovered,\n    handleMouseEnter: () => setIsHovered(true),\n    handleMouseLeave: () => setIsHovered(false),\n  };\n}\n\nconst shiverVariants = {\n  hover: {\n    x: [0, -1, 1, -1, 1, 0],\n    y: [0, 1, -1, 1, -1, 0],\n    transition: {\n      x: { repeat: Infinity, repeatType: \"mirror\", duration: 0.4 },\n      y: { repeat: Infinity, repeatType: \"mirror\", duration: 0.4, delay: 0.1 },\n    },\n  },\n};\n\nexport default function GalaxyButton({\n  text,\n  gradientColors,\n  shimmerColor = \"white\",\n  textColor = \"white\",\n  fontSize = \"1rem\",\n  padding = \"0.875rem 2.5rem\",\n  starCount = 100,\n  className = \"\",\n  onClick,\n}: GalaxyButtonProps) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [stars, setStars] = useState<Star[]>([]);\n  const { isHovered, handleMouseEnter, handleMouseLeave } = useIsHovered();\n\n  const shadowStyles = useMemo(() => {\n    const createShadow = (opacity: number) =>\n      gradientColors\n        .map(\n          (color) =>\n            `inset 0 0 10px ${color}${Math.round(opacity * 255)\n              .toString(16)\n              .padStart(2, \"0\")}`,\n        )\n        .join(\",\");\n\n    return {\n      default: createShadow(0.5),\n      hover: createShadow(0.7),\n      active: createShadow(0.9),\n    };\n  }, [gradientColors]);\n\n  useEffect(() => {\n    const generateStars = () => {\n      if (buttonRef.current) {\n        const { width, height } = buttonRef.current.getBoundingClientRect();\n        const centerX = width / 2;\n        const centerY = height / 2;\n        setStars(\n          Array.from({ length: starCount }, (_, i) => {\n            const angle = Math.random() * 2 * Math.PI;\n            const distance = Math.max(width, height) / 2;\n            return {\n              id: i,\n              x: centerX + Math.cos(angle) * distance,\n              y: centerY + Math.sin(angle) * distance,\n              size: Math.random() * 2 + 1,\n              angle,\n              distance,\n              speed: Math.random() * 0.5 + 0.5,\n            };\n          }),\n        );\n      }\n    };\n    generateStars();\n    window.addEventListener(\"resize\", generateStars);\n    return () => window.removeEventListener(\"resize\", generateStars);\n  }, [starCount]);\n\n  const renderStars = (duration: (star: Star) => number) =>\n    stars.map((star) => (\n      <motion.div\n        key={star.id}\n        className=\"absolute rounded-full bg-white\"\n        style={{\n          left: star.x,\n          top: star.y,\n          width: star.size,\n          height: star.size,\n        }}\n        animate={{\n          x: -Math.cos(star.angle) * star.distance * star.speed,\n          y: -Math.sin(star.angle) * star.distance * star.speed,\n          scale: [1, 0],\n          opacity: [1, 0],\n        }}\n        transition={{\n          duration: duration(star),\n          repeat: Infinity,\n          ease: \"linear\",\n          delay: Math.random() * 2,\n        }}\n      />\n    ));\n\n  const gradientStyle = `linear-gradient(to right, ${gradientColors.join(\", \")})`;\n\n  return (\n    <motion.button\n      ref={buttonRef}\n      className={`group relative z-0 overflow-hidden rounded-full focus:outline-none ${className}`}\n      style={\n        {\n          \"--spread\": \"90deg\",\n          \"--shimmer-color\": shimmerColor,\n          \"--radius\": \"9999px\",\n          \"--speed\": \"3s\",\n          \"--cut\": \"0.05em\",\n          \"--bg\": \"white\",\n          background: gradientStyle,\n          padding: padding,\n          fontSize: fontSize,\n          color: textColor,\n        } as React.CSSProperties\n      }\n      whileTap={{ scale: 0.95 }}\n      whileHover={{\n        boxShadow: `0 0 40px ${gradientColors[0]}70, 0 0 40px ${gradientColors[1]}50, 0 0 60px ${gradientColors[2]}30`,\n      }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onClick={onClick}\n    >\n      <div className=\"absolute inset-0.5 rounded-full bg-black\" />\n\n      <div className=\"absolute inset-0 -z-30 overflow-visible blur-[0px] [container-type:size]\">\n        <div className=\"absolute inset-0 h-[100cqh] animate-slide [aspect-ratio:1] [border-radius:0] [mask:none]\">\n          <div className=\"animate-spin-around absolute inset-[-100%] w-auto rotate-0 [background:conic-gradient(from_calc(270deg-(var(--spread)*0.5)),transparent_0,var(--shimmer-color)_var(--spread),transparent_var(--spread))] [translate:0_0]\" />\n        </div>\n      </div>\n\n      <div\n        className=\"absolute inset-0 rounded-full transition-all duration-300 ease-in-out\"\n        style={{\n          boxShadow: shadowStyles.default,\n        }}\n      />\n\n      <div\n        className=\"absolute inset-0 rounded-full opacity-0 transition-all duration-300 ease-in-out group-hover:opacity-100\"\n        style={{\n          boxShadow: shadowStyles.hover,\n        }}\n      />\n\n      <div\n        className=\"absolute inset-0 rounded-full opacity-0 transition-all duration-300 ease-in-out group-active:opacity-100\"\n        style={{\n          boxShadow: shadowStyles.active,\n        }}\n      />\n\n      <div className=\"absolute inset-0 overflow-hidden rounded-full\">\n        <div className=\"absolute -inset-[100%] animate-galaxy-glare bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.1)_0%,transparent_50%)] opacity-0 group-hover:opacity-100 transition-opacity duration-1000\" />\n      </div>\n\n      <div className=\"absolute inset-0 opacity-0 transition-opacity duration-300 ease-in-out group-hover:opacity-100\">\n        {renderStars((star) => star.speed)}\n      </div>\n\n      <div className=\"absolute inset-0 opacity-100 transition-opacity duration-300 ease-in-out group-hover:opacity-0\">\n        {renderStars((star) => 2 / star.speed)}\n      </div>\n\n      <motion.span\n        className=\"relative z-10 font-light inline-block\"\n        variants={shiverVariants}\n        animate={isHovered ? \"hover\" : \"initial\"}\n      >\n        <span className=\"relative z-10 font-light inline-block transition-all duration-500 ease-in-out group-hover:scale-90 group-hover:animate-shiver\">\n          {text}\n        </span>\n      </motion.span>\n    </motion.button>\n  );\n}\n"
    }
  ],
  "type": "components:ui"
}
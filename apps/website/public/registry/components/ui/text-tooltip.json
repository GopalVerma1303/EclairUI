{
  "name": "text-tooltip",
  "files": [
    {
      "name": "text-tooltip.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\n\ntype TextTooltipProps = {\n  text: string;\n  hoverMessage?: string;\n  children?: React.ReactNode;\n};\n\nconst TextTooltip: React.FC<TextTooltipProps> = ({\n  text,\n  hoverMessage,\n  children,\n}) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isVisible, setIsVisible] = useState(false);\n  const linkRef = useRef<HTMLDivElement>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (linkRef.current && tooltipRef.current) {\n        const linkRect = linkRef.current.getBoundingClientRect();\n        const tooltipRect = tooltipRef.current.getBoundingClientRect();\n        setPosition({\n          x: e.clientX - linkRect.left,\n          y: e.clientY - linkRect.top - tooltipRect.height - 10,\n        });\n      }\n    };\n\n    if (isHovering) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      timeoutId = setTimeout(() => setIsVisible(true), 50);\n    } else {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      setIsVisible(false);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      clearTimeout(timeoutId);\n    };\n  }, [isHovering]);\n\n  return (\n    <div\n      ref={linkRef}\n      className=\"inline-block relative w-full hover:cursor-pointer\"\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      {children || text}\n      {isHovering && hoverMessage && (\n        <div\n          ref={tooltipRef}\n          className={`absolute bg-[#ffffff] dark:bg-[#111111] border border-black/10 dark:border-white/20 p-3 rounded shadow-lg z-10 w-64 transition-opacity duration-200 ease-in-out ${\n            isVisible ? \"opacity-100\" : \"opacity-0\"\n          }`}\n          style={{\n            left: `${position.x}px`,\n            top: `${position.y}px`,\n            transform: \"translateX(-50%)\",\n            pointerEvents: \"none\",\n          }}\n        >\n          <p className=\"text-sm opacity-70 font-light\">{hoverMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TextTooltip;\n"
    }
  ],
  "type": "components:ui"
}
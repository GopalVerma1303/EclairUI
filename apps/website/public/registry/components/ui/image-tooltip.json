{
  "name": "image-tooltip",
  "files": [
    {
      "name": "image-tooltip.tsx",
      "content": "\"use client\";\n\nimport Image from \"next/image\";\nimport { useLayoutEffect } from \"react\";\nimport React, { SVGProps, useState, useRef, useEffect } from \"react\";\n\ntype ImageTooltipProps = {\n  text: string;\n  Icon?: React.FC<SVGProps<SVGSVGElement>>;\n  hoverImage?: {\n    src: string;\n    alt: string;\n    width: number;\n    height: number;\n  };\n};\n\nconst ImageTooltip: React.FC<ImageTooltipProps> = ({\n  Icon,\n  text,\n  hoverImage,\n}: ImageTooltipProps) => {\n  const [isHovering, setIsHovering] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isVisible, setIsVisible] = useState(false);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n  const linkRef = useRef<HTMLDivElement>(null);\n  const hoverContentRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (linkRef.current && hoverContentRef.current) {\n        const linkRect = linkRef.current.getBoundingClientRect();\n        const hoverRect = hoverContentRef.current.getBoundingClientRect();\n        setPosition({\n          x: e.clientX - linkRect.left,\n          y: e.clientY - linkRect.top - hoverRect.height - 10,\n        });\n      }\n    };\n\n    if (isHovering) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      if (!hoverImage || isImageLoaded) {\n        setTimeout(() => setIsVisible(true), 50);\n      }\n    } else {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      setIsVisible(false);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n    };\n  }, [isHovering, isImageLoaded, hoverImage]);\n\n  useEffect(() => {\n    if (!isHovering) {\n      setIsImageLoaded(false);\n    }\n  }, [isHovering]);\n\n  const handleImageLoad = () => {\n    setIsImageLoaded(true);\n    if (isHovering) {\n      setIsVisible(true);\n    }\n  };\n\n  return (\n    <div\n      ref={linkRef}\n      className={`inline-flex justify-center items-center mx-[4px] font-bold hover:cursor-pointer ${\n        Icon ? \"pb-1\" : \"\"\n      } rounded-none w-fit border-b border-black/30 dark:border-white/30 dark:hover:border-white/90 hover:border-black/90 transition-colors duration-500 relative`}\n      onMouseEnter={() => setIsHovering(true)}\n      onMouseLeave={() => setIsHovering(false)}\n    >\n      {Icon && <Icon className=\"mr-1\" />}\n      {text}\n      {isHovering && hoverImage && (\n        <div\n          ref={hoverContentRef}\n          className={`absolute dark:bg-[#111111] bg-[#FFFFFF] border-[#e6e6e6] border dark:border-[#333333] rounded shadow-md z-10 transition-opacity duration-300 ease-in-out ${\n            isVisible ? \"opacity-100\" : \"opacity-0\"\n          }`}\n          style={{\n            left: `${position.x}px`,\n            top: `${position.y}px`,\n            width: hoverImage ? `${hoverImage.width}px` : \"auto\",\n            transform: \"translateX(-50%)\",\n            pointerEvents: \"none\",\n          }}\n        >\n          {hoverImage && (\n            <Image\n              src={hoverImage.src}\n              alt={hoverImage.alt}\n              width={hoverImage.width}\n              height={hoverImage.height}\n              className=\"rounded\"\n              onLoad={handleImageLoad}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageTooltip;\n"
    }
  ],
  "type": "components:ui"
}